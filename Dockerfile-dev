# ---------------------------------------------------------------------------
# Django container build
# ---------------------------------------------------------------------------

# We're using "Slim" (which is a cut down Debian Stretch) because Debian is a
# much more standard setup than alpine with the potential for a lot less faff
# later on if we need to install more obscure dependencies.
FROM python:3.10-slim as runtime

# Don't buffer output - we should always get error messages this way
ENV PYTHONUNBUFFERED 1

# Don't write bytecode to disk
ENV PYTHONDONTWRITEBYTECODE 1

# Set up our user
RUN addgroup --system django \
    && adduser --system --ingroup django django


RUN bash -c 'mkdir -p /usr/share/man/man{1,7}'
RUN apt-get update && apt-get upgrade -qq -y && apt-get install -y \
  sudo git libpq-dev postgresql-client make inotify-tools sqlite3 \
  curl gcc libgdal-dev

#RUN apt-get update && \
#   apt-get upgrade -qq -y
#RUN apt-get install -y sudo make inotify-tools curl gcc


RUN pip install -U pip

RUN bash -c 'echo PATH="${PATH}:/home/django/.local/bin" >> /home/django/.bashrc'

USER django
ENV PATH="${PATH}:/home/django/.local/bin"
RUN pip install pip-tools

# Requirements are installed here to ensure they will be cached.
COPY ./requirements/local.txt /app/requirements/local.txt
WORKDIR /app

RUN ~/.local/bin/pip-sync ./requirements/local.txt

# COPY . /app

# RUN ENV=offline \ DJANGO_SETTINGS_MODULE=config.settings.staticfiles \ sudo -u django python manage.py collectstatic --noinput

# RUN chown -R django /app
# ARG COMMIT_ID
# RUN sed -i "s/@@__COMMIT_ID__@@/$COMMIT_ID/g" /app/config/settings/base.py

EXPOSE 5000
