name: app
type: python:3.8

dependencies:
    python3:
        pip: "21.0.1"
        pip-tools: "6.0.8"
        pipenv: "2020.11.15"
        gunicorn: "*"

variables:
  env:
      # NVM: v0.38.0 (latest):
      # https://github.com/nvm-sh/nvm/releases
      NVM_VERSION: v0.38.0
      # NODE v14 (Active LTS) EOL 2023-04-30:
      # https://nodejs.org/en/about/releases/
      NODE_VERSION: 14.13.1

hooks:
    build: |
        export PATH=/app/.global/bin:/app/.global/vendor/bin:/opt/python/3.8/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
        curl -sS https://platform.sh/cli/installer | php
        
        # Install Python/Django requirements
        pip-sync

        # Install Node.js and NPM
        # https://docs.platform.sh/languages/nodejs/nvm.html#how-to-use-nvm-to-run-different-versions-of-nodejs
        unset NPM_CONFIG_PREFIX
        export NVM_DIR="$PLATFORM_APP_DIR/.nvm"
        # install.sh will automatically install NodeJS based on the presence of $NODE_VERSION
        curl -f -o- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"   

        nvm current
        npm install
        npm run build

        python --version
        python manage.py compilescss
        python manage.py collectstatic --noinput
    deploy: |
        python manage.py migrate
        unset NPM_CONFIG_PREFIX
        export NVM_DIR="$PLATFORM_APP_DIR/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm use 10.21
        if [ "$PLATFORM_BRANCH" = staging ] ; then
          env PYTHON_BIN=`which python` ./docker/init.sh populate_data
          env PYTHON_BIN=`which python` ./docker/init.sh load_fixtures 
        fi

disk: 512

relationships:
    database: "postgresqldb:postgresql"


crons:
    renewcert:
        # Do redeploy twice a month to force renewal of LE cert
        spec: '0 10 1,15 * *'
        cmd: |
            if [ "$PLATFORM_BRANCH" = master ]; then
                platform redeploy --yes --no-wait
            fi
    snapshot:
        spec: '0 5 * * *'
        cmd: |
            if [ "$PLATFORM_BRANCH" = master ]; then
                platform snapshot:create --yes --no-wait
            fi

web:
    upstream:
        socket_family: "unix"

    commands:
        start: "gunicorn -w 4 -b unix:$SOCKET prospector.wsgi:application"

    locations:
        "/":
            root: ""
            passthru: true
            allow: false
        "/static":
            root: "static/"
            allow: true
        "/uploads":
            root: "prospector/uploads/"
            allow: true

# Set a local R/W mount for logs
mounts:
    'logs':
        source: local
        source_path: logs
    'prospector/uploads':
        source: local
        source_path: prospector/uploads
